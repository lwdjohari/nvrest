// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: order_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_order_5fservice_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_order_5fservice_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_order_5fservice_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_order_5fservice_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_order_5fservice_2eproto;
namespace orderservice {
class Coupon;
struct CouponDefaultTypeInternal;
extern CouponDefaultTypeInternal _Coupon_default_instance_;
class OrderRequest;
struct OrderRequestDefaultTypeInternal;
extern OrderRequestDefaultTypeInternal _OrderRequest_default_instance_;
class OrderResult;
struct OrderResultDefaultTypeInternal;
extern OrderResultDefaultTypeInternal _OrderResult_default_instance_;
class Product;
struct ProductDefaultTypeInternal;
extern ProductDefaultTypeInternal _Product_default_instance_;
class Void;
struct VoidDefaultTypeInternal;
extern VoidDefaultTypeInternal _Void_default_instance_;
}  // namespace orderservice
PROTOBUF_NAMESPACE_OPEN
template <>
::orderservice::Coupon* Arena::CreateMaybeMessage<::orderservice::Coupon>(Arena*);
template <>
::orderservice::OrderRequest* Arena::CreateMaybeMessage<::orderservice::OrderRequest>(Arena*);
template <>
::orderservice::OrderResult* Arena::CreateMaybeMessage<::orderservice::OrderResult>(Arena*);
template <>
::orderservice::Product* Arena::CreateMaybeMessage<::orderservice::Product>(Arena*);
template <>
::orderservice::Void* Arena::CreateMaybeMessage<::orderservice::Void>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace orderservice {

// ===================================================================


// -------------------------------------------------------------------

class Product final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:orderservice.Product) */ {
 public:
  inline Product() : Product(nullptr) {}
  ~Product() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Product(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Product(const Product& from);
  Product(Product&& from) noexcept
    : Product() {
    *this = ::std::move(from);
  }

  inline Product& operator=(const Product& from) {
    CopyFrom(from);
    return *this;
  }
  inline Product& operator=(Product&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Product& default_instance() {
    return *internal_default_instance();
  }
  static inline const Product* internal_default_instance() {
    return reinterpret_cast<const Product*>(
               &_Product_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Product& a, Product& b) {
    a.Swap(&b);
  }
  inline void Swap(Product* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Product* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Product* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Product>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Product& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Product& from) {
    Product::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Product* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "orderservice.Product";
  }
  protected:
  explicit Product(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPriceFieldNumber = 3,
    kQuantityFieldNumber = 2,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // double price = 3;
  void clear_price() ;
  double price() const;
  void set_price(double value);

  private:
  double _internal_price() const;
  void _internal_set_price(double value);

  public:
  // int32 quantity = 2;
  void clear_quantity() ;
  ::int32_t quantity() const;
  void set_quantity(::int32_t value);

  private:
  ::int32_t _internal_quantity() const;
  void _internal_set_quantity(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:orderservice.Product)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    double price_;
    ::int32_t quantity_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_order_5fservice_2eproto;
};// -------------------------------------------------------------------

class Coupon final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:orderservice.Coupon) */ {
 public:
  inline Coupon() : Coupon(nullptr) {}
  ~Coupon() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Coupon(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Coupon(const Coupon& from);
  Coupon(Coupon&& from) noexcept
    : Coupon() {
    *this = ::std::move(from);
  }

  inline Coupon& operator=(const Coupon& from) {
    CopyFrom(from);
    return *this;
  }
  inline Coupon& operator=(Coupon&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Coupon& default_instance() {
    return *internal_default_instance();
  }
  static inline const Coupon* internal_default_instance() {
    return reinterpret_cast<const Coupon*>(
               &_Coupon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Coupon& a, Coupon& b) {
    a.Swap(&b);
  }
  inline void Swap(Coupon* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Coupon* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Coupon* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Coupon>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Coupon& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Coupon& from) {
    Coupon::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Coupon* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "orderservice.Coupon";
  }
  protected:
  explicit Coupon(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 1,
    kDiscountFieldNumber = 2,
  };
  // string code = 1;
  void clear_code() ;
  const std::string& code() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_code(Arg_&& arg, Args_... args);
  std::string* mutable_code();
  PROTOBUF_NODISCARD std::string* release_code();
  void set_allocated_code(std::string* ptr);

  private:
  const std::string& _internal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_code(
      const std::string& value);
  std::string* _internal_mutable_code();

  public:
  // double discount = 2;
  void clear_discount() ;
  double discount() const;
  void set_discount(double value);

  private:
  double _internal_discount() const;
  void _internal_set_discount(double value);

  public:
  // @@protoc_insertion_point(class_scope:orderservice.Coupon)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
    double discount_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_order_5fservice_2eproto;
};// -------------------------------------------------------------------

class OrderRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:orderservice.OrderRequest) */ {
 public:
  inline OrderRequest() : OrderRequest(nullptr) {}
  ~OrderRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR OrderRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OrderRequest(const OrderRequest& from);
  OrderRequest(OrderRequest&& from) noexcept
    : OrderRequest() {
    *this = ::std::move(from);
  }

  inline OrderRequest& operator=(const OrderRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderRequest& operator=(OrderRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OrderRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const OrderRequest* internal_default_instance() {
    return reinterpret_cast<const OrderRequest*>(
               &_OrderRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(OrderRequest& a, OrderRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OrderRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OrderRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OrderRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OrderRequest& from) {
    OrderRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "orderservice.OrderRequest";
  }
  protected:
  explicit OrderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProductsFieldNumber = 1,
    kCouponFieldNumber = 2,
  };
  // repeated .orderservice.Product products = 1;
  int products_size() const;
  private:
  int _internal_products_size() const;

  public:
  void clear_products() ;
  ::orderservice::Product* mutable_products(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::orderservice::Product >*
      mutable_products();
  private:
  const ::orderservice::Product& _internal_products(int index) const;
  ::orderservice::Product* _internal_add_products();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::orderservice::Product>& _internal_products() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::orderservice::Product>* _internal_mutable_products();
  public:
  const ::orderservice::Product& products(int index) const;
  ::orderservice::Product* add_products();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::orderservice::Product >&
      products() const;
  // .orderservice.Coupon coupon = 2;
  bool has_coupon() const;
  void clear_coupon() ;
  const ::orderservice::Coupon& coupon() const;
  PROTOBUF_NODISCARD ::orderservice::Coupon* release_coupon();
  ::orderservice::Coupon* mutable_coupon();
  void set_allocated_coupon(::orderservice::Coupon* coupon);
  private:
  const ::orderservice::Coupon& _internal_coupon() const;
  ::orderservice::Coupon* _internal_mutable_coupon();
  public:
  void unsafe_arena_set_allocated_coupon(
      ::orderservice::Coupon* coupon);
  ::orderservice::Coupon* unsafe_arena_release_coupon();
  // @@protoc_insertion_point(class_scope:orderservice.OrderRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::orderservice::Product > products_;
    ::orderservice::Coupon* coupon_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_order_5fservice_2eproto;
};// -------------------------------------------------------------------

class OrderResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:orderservice.OrderResult) */ {
 public:
  inline OrderResult() : OrderResult(nullptr) {}
  ~OrderResult() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR OrderResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OrderResult(const OrderResult& from);
  OrderResult(OrderResult&& from) noexcept
    : OrderResult() {
    *this = ::std::move(from);
  }

  inline OrderResult& operator=(const OrderResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderResult& operator=(OrderResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OrderResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const OrderResult* internal_default_instance() {
    return reinterpret_cast<const OrderResult*>(
               &_OrderResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(OrderResult& a, OrderResult& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderResult* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OrderResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OrderResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OrderResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OrderResult& from) {
    OrderResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "orderservice.OrderResult";
  }
  protected:
  explicit OrderResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTotalFieldNumber = 1,
    kDiscountFieldNumber = 2,
    kFinalTotalFieldNumber = 3,
  };
  // double total = 1;
  void clear_total() ;
  double total() const;
  void set_total(double value);

  private:
  double _internal_total() const;
  void _internal_set_total(double value);

  public:
  // double discount = 2;
  void clear_discount() ;
  double discount() const;
  void set_discount(double value);

  private:
  double _internal_discount() const;
  void _internal_set_discount(double value);

  public:
  // double final_total = 3;
  void clear_final_total() ;
  double final_total() const;
  void set_final_total(double value);

  private:
  double _internal_final_total() const;
  void _internal_set_final_total(double value);

  public:
  // @@protoc_insertion_point(class_scope:orderservice.OrderResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double total_;
    double discount_;
    double final_total_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_order_5fservice_2eproto;
};// -------------------------------------------------------------------

class Void final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:orderservice.Void) */ {
 public:
  inline Void() : Void(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Void(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Void(const Void& from);
  Void(Void&& from) noexcept
    : Void() {
    *this = ::std::move(from);
  }

  inline Void& operator=(const Void& from) {
    CopyFrom(from);
    return *this;
  }
  inline Void& operator=(Void&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Void& default_instance() {
    return *internal_default_instance();
  }
  static inline const Void* internal_default_instance() {
    return reinterpret_cast<const Void*>(
               &_Void_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Void& a, Void& b) {
    a.Swap(&b);
  }
  inline void Swap(Void* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Void* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Void* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Void>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Void& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Void& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "orderservice.Void";
  }
  protected:
  explicit Void(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:orderservice.Void)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_order_5fservice_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Product

// string name = 1;
inline void Product::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Product::name() const {
  // @@protoc_insertion_point(field_get:orderservice.Product.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Product::set_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:orderservice.Product.name)
}
inline std::string* Product::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:orderservice.Product.name)
  return _s;
}
inline const std::string& Product::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Product::_internal_set_name(const std::string& value) {
  ;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Product::_internal_mutable_name() {
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* Product::release_name() {
  // @@protoc_insertion_point(field_release:orderservice.Product.name)
  return _impl_.name_.Release();
}
inline void Product::set_allocated_name(std::string* value) {
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:orderservice.Product.name)
}

// int32 quantity = 2;
inline void Product::clear_quantity() {
  _impl_.quantity_ = 0;
}
inline ::int32_t Product::quantity() const {
  // @@protoc_insertion_point(field_get:orderservice.Product.quantity)
  return _internal_quantity();
}
inline void Product::set_quantity(::int32_t value) {
  _internal_set_quantity(value);
  // @@protoc_insertion_point(field_set:orderservice.Product.quantity)
}
inline ::int32_t Product::_internal_quantity() const {
  return _impl_.quantity_;
}
inline void Product::_internal_set_quantity(::int32_t value) {
  ;
  _impl_.quantity_ = value;
}

// double price = 3;
inline void Product::clear_price() {
  _impl_.price_ = 0;
}
inline double Product::price() const {
  // @@protoc_insertion_point(field_get:orderservice.Product.price)
  return _internal_price();
}
inline void Product::set_price(double value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:orderservice.Product.price)
}
inline double Product::_internal_price() const {
  return _impl_.price_;
}
inline void Product::_internal_set_price(double value) {
  ;
  _impl_.price_ = value;
}

// -------------------------------------------------------------------

// Coupon

// string code = 1;
inline void Coupon::clear_code() {
  _impl_.code_.ClearToEmpty();
}
inline const std::string& Coupon::code() const {
  // @@protoc_insertion_point(field_get:orderservice.Coupon.code)
  return _internal_code();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Coupon::set_code(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.code_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:orderservice.Coupon.code)
}
inline std::string* Coupon::mutable_code() {
  std::string* _s = _internal_mutable_code();
  // @@protoc_insertion_point(field_mutable:orderservice.Coupon.code)
  return _s;
}
inline const std::string& Coupon::_internal_code() const {
  return _impl_.code_.Get();
}
inline void Coupon::_internal_set_code(const std::string& value) {
  ;


  _impl_.code_.Set(value, GetArenaForAllocation());
}
inline std::string* Coupon::_internal_mutable_code() {
  ;
  return _impl_.code_.Mutable( GetArenaForAllocation());
}
inline std::string* Coupon::release_code() {
  // @@protoc_insertion_point(field_release:orderservice.Coupon.code)
  return _impl_.code_.Release();
}
inline void Coupon::set_allocated_code(std::string* value) {
  _impl_.code_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.code_.IsDefault()) {
          _impl_.code_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:orderservice.Coupon.code)
}

// double discount = 2;
inline void Coupon::clear_discount() {
  _impl_.discount_ = 0;
}
inline double Coupon::discount() const {
  // @@protoc_insertion_point(field_get:orderservice.Coupon.discount)
  return _internal_discount();
}
inline void Coupon::set_discount(double value) {
  _internal_set_discount(value);
  // @@protoc_insertion_point(field_set:orderservice.Coupon.discount)
}
inline double Coupon::_internal_discount() const {
  return _impl_.discount_;
}
inline void Coupon::_internal_set_discount(double value) {
  ;
  _impl_.discount_ = value;
}

// -------------------------------------------------------------------

// OrderRequest

// repeated .orderservice.Product products = 1;
inline int OrderRequest::_internal_products_size() const {
  return _impl_.products_.size();
}
inline int OrderRequest::products_size() const {
  return _internal_products_size();
}
inline void OrderRequest::clear_products() {
  _internal_mutable_products()->Clear();
}
inline ::orderservice::Product* OrderRequest::mutable_products(int index) {
  // @@protoc_insertion_point(field_mutable:orderservice.OrderRequest.products)
  return _internal_mutable_products()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::orderservice::Product >*
OrderRequest::mutable_products() {
  // @@protoc_insertion_point(field_mutable_list:orderservice.OrderRequest.products)
  return _internal_mutable_products();
}
inline const ::orderservice::Product& OrderRequest::_internal_products(int index) const {
  return _internal_products().Get(index);
}
inline const ::orderservice::Product& OrderRequest::products(int index) const {
  // @@protoc_insertion_point(field_get:orderservice.OrderRequest.products)
  return _internal_products(index);
}
inline ::orderservice::Product* OrderRequest::_internal_add_products() {
  return _internal_mutable_products()->Add();
}
inline ::orderservice::Product* OrderRequest::add_products() {
  ::orderservice::Product* _add = _internal_add_products();
  // @@protoc_insertion_point(field_add:orderservice.OrderRequest.products)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::orderservice::Product >&
OrderRequest::products() const {
  // @@protoc_insertion_point(field_list:orderservice.OrderRequest.products)
  return _internal_products();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::orderservice::Product>&
OrderRequest::_internal_products() const {
  return _impl_.products_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::orderservice::Product>*
OrderRequest::_internal_mutable_products() {
  return &_impl_.products_;
}

// .orderservice.Coupon coupon = 2;
inline bool OrderRequest::has_coupon() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.coupon_ != nullptr);
  return value;
}
inline void OrderRequest::clear_coupon() {
  if (_impl_.coupon_ != nullptr) _impl_.coupon_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::orderservice::Coupon& OrderRequest::_internal_coupon() const {
  const ::orderservice::Coupon* p = _impl_.coupon_;
  return p != nullptr ? *p : reinterpret_cast<const ::orderservice::Coupon&>(
      ::orderservice::_Coupon_default_instance_);
}
inline const ::orderservice::Coupon& OrderRequest::coupon() const {
  // @@protoc_insertion_point(field_get:orderservice.OrderRequest.coupon)
  return _internal_coupon();
}
inline void OrderRequest::unsafe_arena_set_allocated_coupon(
    ::orderservice::Coupon* coupon) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.coupon_);
  }
  _impl_.coupon_ = coupon;
  if (coupon) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:orderservice.OrderRequest.coupon)
}
inline ::orderservice::Coupon* OrderRequest::release_coupon() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::orderservice::Coupon* temp = _impl_.coupon_;
  _impl_.coupon_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::orderservice::Coupon* OrderRequest::unsafe_arena_release_coupon() {
  // @@protoc_insertion_point(field_release:orderservice.OrderRequest.coupon)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::orderservice::Coupon* temp = _impl_.coupon_;
  _impl_.coupon_ = nullptr;
  return temp;
}
inline ::orderservice::Coupon* OrderRequest::_internal_mutable_coupon() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.coupon_ == nullptr) {
    auto* p = CreateMaybeMessage<::orderservice::Coupon>(GetArenaForAllocation());
    _impl_.coupon_ = p;
  }
  return _impl_.coupon_;
}
inline ::orderservice::Coupon* OrderRequest::mutable_coupon() {
  ::orderservice::Coupon* _msg = _internal_mutable_coupon();
  // @@protoc_insertion_point(field_mutable:orderservice.OrderRequest.coupon)
  return _msg;
}
inline void OrderRequest::set_allocated_coupon(::orderservice::Coupon* coupon) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.coupon_;
  }
  if (coupon) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(coupon);
    if (message_arena != submessage_arena) {
      coupon = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, coupon, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.coupon_ = coupon;
  // @@protoc_insertion_point(field_set_allocated:orderservice.OrderRequest.coupon)
}

// -------------------------------------------------------------------

// OrderResult

// double total = 1;
inline void OrderResult::clear_total() {
  _impl_.total_ = 0;
}
inline double OrderResult::total() const {
  // @@protoc_insertion_point(field_get:orderservice.OrderResult.total)
  return _internal_total();
}
inline void OrderResult::set_total(double value) {
  _internal_set_total(value);
  // @@protoc_insertion_point(field_set:orderservice.OrderResult.total)
}
inline double OrderResult::_internal_total() const {
  return _impl_.total_;
}
inline void OrderResult::_internal_set_total(double value) {
  ;
  _impl_.total_ = value;
}

// double discount = 2;
inline void OrderResult::clear_discount() {
  _impl_.discount_ = 0;
}
inline double OrderResult::discount() const {
  // @@protoc_insertion_point(field_get:orderservice.OrderResult.discount)
  return _internal_discount();
}
inline void OrderResult::set_discount(double value) {
  _internal_set_discount(value);
  // @@protoc_insertion_point(field_set:orderservice.OrderResult.discount)
}
inline double OrderResult::_internal_discount() const {
  return _impl_.discount_;
}
inline void OrderResult::_internal_set_discount(double value) {
  ;
  _impl_.discount_ = value;
}

// double final_total = 3;
inline void OrderResult::clear_final_total() {
  _impl_.final_total_ = 0;
}
inline double OrderResult::final_total() const {
  // @@protoc_insertion_point(field_get:orderservice.OrderResult.final_total)
  return _internal_final_total();
}
inline void OrderResult::set_final_total(double value) {
  _internal_set_final_total(value);
  // @@protoc_insertion_point(field_set:orderservice.OrderResult.final_total)
}
inline double OrderResult::_internal_final_total() const {
  return _impl_.final_total_;
}
inline void OrderResult::_internal_set_final_total(double value) {
  ;
  _impl_.final_total_ = value;
}

// -------------------------------------------------------------------

// Void

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace orderservice


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_order_5fservice_2eproto_2epb_2eh
