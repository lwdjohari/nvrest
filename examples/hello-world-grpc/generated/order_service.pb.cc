// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: order_service.proto

#include "order_service.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace orderservice {
template <typename>
PROTOBUF_CONSTEXPR Product::Product(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.price_)*/ 0

  , /*decltype(_impl_.quantity_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProductDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProductDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProductDefaultTypeInternal() {}
  union {
    Product _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProductDefaultTypeInternal _Product_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Coupon::Coupon(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.code_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.discount_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CouponDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CouponDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CouponDefaultTypeInternal() {}
  union {
    Coupon _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CouponDefaultTypeInternal _Coupon_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR OrderRequest::OrderRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.products_)*/{}
  , /*decltype(_impl_.coupon_)*/nullptr} {}
struct OrderRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OrderRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OrderRequestDefaultTypeInternal() {}
  union {
    OrderRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OrderRequestDefaultTypeInternal _OrderRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR OrderResult::OrderResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.total_)*/ 0

  , /*decltype(_impl_.discount_)*/ 0

  , /*decltype(_impl_.final_total_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OrderResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OrderResultDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OrderResultDefaultTypeInternal() {}
  union {
    OrderResult _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OrderResultDefaultTypeInternal _OrderResult_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Void::Void(
    ::_pbi::ConstantInitialized) {}
struct VoidDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VoidDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VoidDefaultTypeInternal() {}
  union {
    Void _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VoidDefaultTypeInternal _Void_default_instance_;
}  // namespace orderservice
static ::_pb::Metadata file_level_metadata_order_5fservice_2eproto[5];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_order_5fservice_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_order_5fservice_2eproto = nullptr;
const ::uint32_t TableStruct_order_5fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::orderservice::Product, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::orderservice::Product, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::orderservice::Product, _impl_.quantity_),
    PROTOBUF_FIELD_OFFSET(::orderservice::Product, _impl_.price_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::orderservice::Coupon, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::orderservice::Coupon, _impl_.code_),
    PROTOBUF_FIELD_OFFSET(::orderservice::Coupon, _impl_.discount_),
    PROTOBUF_FIELD_OFFSET(::orderservice::OrderRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::orderservice::OrderRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::orderservice::OrderRequest, _impl_.products_),
    PROTOBUF_FIELD_OFFSET(::orderservice::OrderRequest, _impl_.coupon_),
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::orderservice::OrderResult, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::orderservice::OrderResult, _impl_.total_),
    PROTOBUF_FIELD_OFFSET(::orderservice::OrderResult, _impl_.discount_),
    PROTOBUF_FIELD_OFFSET(::orderservice::OrderResult, _impl_.final_total_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::orderservice::Void, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::orderservice::Product)},
        { 11, -1, -1, sizeof(::orderservice::Coupon)},
        { 21, 31, -1, sizeof(::orderservice::OrderRequest)},
        { 33, -1, -1, sizeof(::orderservice::OrderResult)},
        { 44, -1, -1, sizeof(::orderservice::Void)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::orderservice::_Product_default_instance_._instance,
    &::orderservice::_Coupon_default_instance_._instance,
    &::orderservice::_OrderRequest_default_instance_._instance,
    &::orderservice::_OrderResult_default_instance_._instance,
    &::orderservice::_Void_default_instance_._instance,
};
const char descriptor_table_protodef_order_5fservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\023order_service.proto\022\014orderservice\"8\n\007P"
    "roduct\022\014\n\004name\030\001 \001(\t\022\020\n\010quantity\030\002 \001(\005\022\r"
    "\n\005price\030\003 \001(\001\"(\n\006Coupon\022\014\n\004code\030\001 \001(\t\022\020\n"
    "\010discount\030\002 \001(\001\"]\n\014OrderRequest\022\'\n\010produ"
    "cts\030\001 \003(\0132\025.orderservice.Product\022$\n\006coup"
    "on\030\002 \001(\0132\024.orderservice.Coupon\"C\n\013OrderR"
    "esult\022\r\n\005total\030\001 \001(\001\022\020\n\010discount\030\002 \001(\001\022\023"
    "\n\013final_total\030\003 \001(\001\"\006\n\004Void2\204\001\n\014OrderSer"
    "vice\022>\n\005Order\022\032.orderservice.OrderReques"
    "t\032\031.orderservice.OrderResult\0224\n\nVoidMeth"
    "od\022\022.orderservice.Void\032\022.orderservice.Vo"
    "idb\006proto3"
};
static ::absl::once_flag descriptor_table_order_5fservice_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_order_5fservice_2eproto = {
    false,
    false,
    450,
    descriptor_table_protodef_order_5fservice_2eproto,
    "order_service.proto",
    &descriptor_table_order_5fservice_2eproto_once,
    nullptr,
    0,
    5,
    schemas,
    file_default_instances,
    TableStruct_order_5fservice_2eproto::offsets,
    file_level_metadata_order_5fservice_2eproto,
    file_level_enum_descriptors_order_5fservice_2eproto,
    file_level_service_descriptors_order_5fservice_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_order_5fservice_2eproto_getter() {
  return &descriptor_table_order_5fservice_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_order_5fservice_2eproto(&descriptor_table_order_5fservice_2eproto);
namespace orderservice {
// ===================================================================

class Product::_Internal {
 public:
};

Product::Product(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:orderservice.Product)
}
Product::Product(const Product& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Product* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_) {}

    , decltype(_impl_.price_) {}

    , decltype(_impl_.quantity_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.price_, &from._impl_.price_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.quantity_) -
    reinterpret_cast<char*>(&_impl_.price_)) + sizeof(_impl_.quantity_));
  // @@protoc_insertion_point(copy_constructor:orderservice.Product)
}

inline void Product::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.name_) {}

    , decltype(_impl_.price_) { 0 }

    , decltype(_impl_.quantity_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Product::~Product() {
  // @@protoc_insertion_point(destructor:orderservice.Product)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Product::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void Product::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Product::Clear() {
// @@protoc_insertion_point(message_clear_start:orderservice.Product)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.price_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.quantity_) -
      reinterpret_cast<char*>(&_impl_.price_)) + sizeof(_impl_.quantity_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Product::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "orderservice.Product.name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 quantity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // double price = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 25)) {
          _impl_.price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Product::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:orderservice.Product)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "orderservice.Product.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // int32 quantity = 2;
  if (this->_internal_quantity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_quantity(), target);
  }

  // double price = 3;
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_price = this->_internal_price();
  ::uint64_t raw_price;
  memcpy(&raw_price, &tmp_price, sizeof(tmp_price));
  if (raw_price != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        3, this->_internal_price(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:orderservice.Product)
  return target;
}

::size_t Product::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:orderservice.Product)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // double price = 3;
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_price = this->_internal_price();
  ::uint64_t raw_price;
  memcpy(&raw_price, &tmp_price, sizeof(tmp_price));
  if (raw_price != 0) {
    total_size += 9;
  }

  // int32 quantity = 2;
  if (this->_internal_quantity() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_quantity());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Product::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Product::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Product::GetClassData() const { return &_class_data_; }


void Product::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Product*>(&to_msg);
  auto& from = static_cast<const Product&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:orderservice.Product)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_price = from._internal_price();
  ::uint64_t raw_price;
  memcpy(&raw_price, &tmp_price, sizeof(tmp_price));
  if (raw_price != 0) {
    _this->_internal_set_price(from._internal_price());
  }
  if (from._internal_quantity() != 0) {
    _this->_internal_set_quantity(from._internal_quantity());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Product::CopyFrom(const Product& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:orderservice.Product)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Product::IsInitialized() const {
  return true;
}

void Product::InternalSwap(Product* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Product, _impl_.quantity_)
      + sizeof(Product::_impl_.quantity_)
      - PROTOBUF_FIELD_OFFSET(Product, _impl_.price_)>(
          reinterpret_cast<char*>(&_impl_.price_),
          reinterpret_cast<char*>(&other->_impl_.price_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Product::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_order_5fservice_2eproto_getter, &descriptor_table_order_5fservice_2eproto_once,
      file_level_metadata_order_5fservice_2eproto[0]);
}
// ===================================================================

class Coupon::_Internal {
 public:
};

Coupon::Coupon(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:orderservice.Coupon)
}
Coupon::Coupon(const Coupon& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Coupon* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.code_) {}

    , decltype(_impl_.discount_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.code_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_code().empty()) {
    _this->_impl_.code_.Set(from._internal_code(), _this->GetArenaForAllocation());
  }
  _this->_impl_.discount_ = from._impl_.discount_;
  // @@protoc_insertion_point(copy_constructor:orderservice.Coupon)
}

inline void Coupon::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.code_) {}

    , decltype(_impl_.discount_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.code_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Coupon::~Coupon() {
  // @@protoc_insertion_point(destructor:orderservice.Coupon)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Coupon::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.code_.Destroy();
}

void Coupon::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Coupon::Clear() {
// @@protoc_insertion_point(message_clear_start:orderservice.Coupon)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.code_.ClearToEmpty();
  _impl_.discount_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Coupon::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "orderservice.Coupon.code"));
        } else {
          goto handle_unusual;
        }
        continue;
      // double discount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 17)) {
          _impl_.discount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Coupon::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:orderservice.Coupon)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string code = 1;
  if (!this->_internal_code().empty()) {
    const std::string& _s = this->_internal_code();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "orderservice.Coupon.code");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // double discount = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_discount = this->_internal_discount();
  ::uint64_t raw_discount;
  memcpy(&raw_discount, &tmp_discount, sizeof(tmp_discount));
  if (raw_discount != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_discount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:orderservice.Coupon)
  return target;
}

::size_t Coupon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:orderservice.Coupon)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string code = 1;
  if (!this->_internal_code().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_code());
  }

  // double discount = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_discount = this->_internal_discount();
  ::uint64_t raw_discount;
  memcpy(&raw_discount, &tmp_discount, sizeof(tmp_discount));
  if (raw_discount != 0) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Coupon::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Coupon::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Coupon::GetClassData() const { return &_class_data_; }


void Coupon::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Coupon*>(&to_msg);
  auto& from = static_cast<const Coupon&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:orderservice.Coupon)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_code().empty()) {
    _this->_internal_set_code(from._internal_code());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_discount = from._internal_discount();
  ::uint64_t raw_discount;
  memcpy(&raw_discount, &tmp_discount, sizeof(tmp_discount));
  if (raw_discount != 0) {
    _this->_internal_set_discount(from._internal_discount());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Coupon::CopyFrom(const Coupon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:orderservice.Coupon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Coupon::IsInitialized() const {
  return true;
}

void Coupon::InternalSwap(Coupon* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.code_, lhs_arena,
                                       &other->_impl_.code_, rhs_arena);

  swap(_impl_.discount_, other->_impl_.discount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Coupon::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_order_5fservice_2eproto_getter, &descriptor_table_order_5fservice_2eproto_once,
      file_level_metadata_order_5fservice_2eproto[1]);
}
// ===================================================================

class OrderRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<OrderRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(OrderRequest, _impl_._has_bits_);
  static const ::orderservice::Coupon& coupon(const OrderRequest* msg);
  static void set_has_coupon(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::orderservice::Coupon&
OrderRequest::_Internal::coupon(const OrderRequest* msg) {
  return *msg->_impl_.coupon_;
}
OrderRequest::OrderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:orderservice.OrderRequest)
}
OrderRequest::OrderRequest(const OrderRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OrderRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.products_){from._impl_.products_}
    , decltype(_impl_.coupon_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.coupon_ = new ::orderservice::Coupon(*from._impl_.coupon_);
  }
  // @@protoc_insertion_point(copy_constructor:orderservice.OrderRequest)
}

inline void OrderRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.products_){arena}
    , decltype(_impl_.coupon_){nullptr}
  };
}

OrderRequest::~OrderRequest() {
  // @@protoc_insertion_point(destructor:orderservice.OrderRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OrderRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_products()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.coupon_;
}

void OrderRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OrderRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:orderservice.OrderRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_products()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.coupon_ != nullptr);
    _impl_.coupon_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .orderservice.Product products = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_products(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // .orderservice.Coupon coupon = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_coupon(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* OrderRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:orderservice.OrderRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .orderservice.Product products = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_products_size()); i < n; i++) {
    const auto& repfield = this->_internal_products(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .orderservice.Coupon coupon = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::coupon(this),
        _Internal::coupon(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:orderservice.OrderRequest)
  return target;
}

::size_t OrderRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:orderservice.OrderRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .orderservice.Product products = 1;
  total_size += 1UL * this->_internal_products_size();
  for (const auto& msg : this->_internal_products()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .orderservice.Coupon coupon = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.coupon_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OrderRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OrderRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OrderRequest::GetClassData() const { return &_class_data_; }


void OrderRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OrderRequest*>(&to_msg);
  auto& from = static_cast<const OrderRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:orderservice.OrderRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_products()->MergeFrom(from._internal_products());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_coupon()->::orderservice::Coupon::MergeFrom(
        from._internal_coupon());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OrderRequest::CopyFrom(const OrderRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:orderservice.OrderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderRequest::IsInitialized() const {
  return true;
}

void OrderRequest::InternalSwap(OrderRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_products()->InternalSwap(other->_internal_mutable_products());
  swap(_impl_.coupon_, other->_impl_.coupon_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_order_5fservice_2eproto_getter, &descriptor_table_order_5fservice_2eproto_once,
      file_level_metadata_order_5fservice_2eproto[2]);
}
// ===================================================================

class OrderResult::_Internal {
 public:
};

OrderResult::OrderResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:orderservice.OrderResult)
}
OrderResult::OrderResult(const OrderResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:orderservice.OrderResult)
}

inline void OrderResult::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.total_) { 0 }

    , decltype(_impl_.discount_) { 0 }

    , decltype(_impl_.final_total_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

OrderResult::~OrderResult() {
  // @@protoc_insertion_point(destructor:orderservice.OrderResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OrderResult::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void OrderResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OrderResult::Clear() {
// @@protoc_insertion_point(message_clear_start:orderservice.OrderResult)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.total_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.final_total_) -
      reinterpret_cast<char*>(&_impl_.total_)) + sizeof(_impl_.final_total_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double total = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 9)) {
          _impl_.total_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // double discount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 17)) {
          _impl_.discount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // double final_total = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 25)) {
          _impl_.final_total_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* OrderResult::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:orderservice.OrderResult)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double total = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_total = this->_internal_total();
  ::uint64_t raw_total;
  memcpy(&raw_total, &tmp_total, sizeof(tmp_total));
  if (raw_total != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_total(), target);
  }

  // double discount = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_discount = this->_internal_discount();
  ::uint64_t raw_discount;
  memcpy(&raw_discount, &tmp_discount, sizeof(tmp_discount));
  if (raw_discount != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_discount(), target);
  }

  // double final_total = 3;
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_final_total = this->_internal_final_total();
  ::uint64_t raw_final_total;
  memcpy(&raw_final_total, &tmp_final_total, sizeof(tmp_final_total));
  if (raw_final_total != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        3, this->_internal_final_total(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:orderservice.OrderResult)
  return target;
}

::size_t OrderResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:orderservice.OrderResult)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double total = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_total = this->_internal_total();
  ::uint64_t raw_total;
  memcpy(&raw_total, &tmp_total, sizeof(tmp_total));
  if (raw_total != 0) {
    total_size += 9;
  }

  // double discount = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_discount = this->_internal_discount();
  ::uint64_t raw_discount;
  memcpy(&raw_discount, &tmp_discount, sizeof(tmp_discount));
  if (raw_discount != 0) {
    total_size += 9;
  }

  // double final_total = 3;
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_final_total = this->_internal_final_total();
  ::uint64_t raw_final_total;
  memcpy(&raw_final_total, &tmp_final_total, sizeof(tmp_final_total));
  if (raw_final_total != 0) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OrderResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OrderResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OrderResult::GetClassData() const { return &_class_data_; }


void OrderResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OrderResult*>(&to_msg);
  auto& from = static_cast<const OrderResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:orderservice.OrderResult)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_total = from._internal_total();
  ::uint64_t raw_total;
  memcpy(&raw_total, &tmp_total, sizeof(tmp_total));
  if (raw_total != 0) {
    _this->_internal_set_total(from._internal_total());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_discount = from._internal_discount();
  ::uint64_t raw_discount;
  memcpy(&raw_discount, &tmp_discount, sizeof(tmp_discount));
  if (raw_discount != 0) {
    _this->_internal_set_discount(from._internal_discount());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_final_total = from._internal_final_total();
  ::uint64_t raw_final_total;
  memcpy(&raw_final_total, &tmp_final_total, sizeof(tmp_final_total));
  if (raw_final_total != 0) {
    _this->_internal_set_final_total(from._internal_final_total());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OrderResult::CopyFrom(const OrderResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:orderservice.OrderResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderResult::IsInitialized() const {
  return true;
}

void OrderResult::InternalSwap(OrderResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OrderResult, _impl_.final_total_)
      + sizeof(OrderResult::_impl_.final_total_)
      - PROTOBUF_FIELD_OFFSET(OrderResult, _impl_.total_)>(
          reinterpret_cast<char*>(&_impl_.total_),
          reinterpret_cast<char*>(&other->_impl_.total_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_order_5fservice_2eproto_getter, &descriptor_table_order_5fservice_2eproto_once,
      file_level_metadata_order_5fservice_2eproto[3]);
}
// ===================================================================

class Void::_Internal {
 public:
};

Void::Void(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:orderservice.Void)
}
Void::Void(const Void& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  Void* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:orderservice.Void)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Void::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Void::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Void::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_order_5fservice_2eproto_getter, &descriptor_table_order_5fservice_2eproto_once,
      file_level_metadata_order_5fservice_2eproto[4]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace orderservice
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::orderservice::Product*
Arena::CreateMaybeMessage< ::orderservice::Product >(Arena* arena) {
  return Arena::CreateMessageInternal< ::orderservice::Product >(arena);
}
template<> PROTOBUF_NOINLINE ::orderservice::Coupon*
Arena::CreateMaybeMessage< ::orderservice::Coupon >(Arena* arena) {
  return Arena::CreateMessageInternal< ::orderservice::Coupon >(arena);
}
template<> PROTOBUF_NOINLINE ::orderservice::OrderRequest*
Arena::CreateMaybeMessage< ::orderservice::OrderRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::orderservice::OrderRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::orderservice::OrderResult*
Arena::CreateMaybeMessage< ::orderservice::OrderResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::orderservice::OrderResult >(arena);
}
template<> PROTOBUF_NOINLINE ::orderservice::Void*
Arena::CreateMaybeMessage< ::orderservice::Void >(Arena* arena) {
  return Arena::CreateMessageInternal< ::orderservice::Void >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
